#Question 2
foo <- read.csv("https://course-resources.minerva.kgi.edu/uploaded_files/mke/00086677-3767/peace.csv")
foo <- foo[, c(6:8, 11:16, 99, 50, 114, 49, 63, 136, 109, 126, 48, 160, 142, 10)]
foo <- foo[c(-19, -47), ]
which(is.na(foo) == TRUE)

#regression without interaction term
glm1 <- glm(pbs2s3 ~ wartype + logcost + wardur + factnum +
                      factnum2 + trnsfcap  + treaty + untype4 + develop +
                      exp + decade, family = "binomial")

#regression with interaction term                      
glm2 <- glm(pbs2s3 ~ wartype + logcost + wardur + factnum +
           factnum2 + trnsfcap + treaty  + untype4 + develop +
           exp + decade + wardur*untype4, family = "binomial")
           
typem <- mean(wartype)
costm <- mean(logcost)
factm <-mean(factnum)
fact2m <- mean(factnum2)
trnsm <- mean(trnsfcap)
develm <- mean(develop)
expm <- mean(exp)
decm <- mean(decade)
treatm <- mean(treaty)

#making vectors like we did in the previous assignment
cont <- c()
treat <- c()
rep1 <- c()

#we loop for each month for treatment effect without interaction term
for(i in 1:315){ 
     cont <- data.frame(typem,costm,i,factm,fact2m,trnsm,0,treatm,
                           develm,expm,decm)
     treat <- data.frame(typem,costm,i,factm,fact2m,trnsm,1,treatm,
                            develm,expm,decm)
     names(cont) <- c('wartype','logcost','wardur','factnum','factnum2','trnsfcap','untype4','treaty','develop',
                         'exp','decade')
     names(treat) <- c('wartype','logcost','wardur','factnum','factnum2','trnsfcap','untype4','treaty','develop',
                          'exp','decade')
     
     rep1[i] <- mean(predict(glm1, newdata = treat,type = 'response'))- mean(predict(glm1, newdata = cont, type = 'response'))
 }

cont2 <- c()
treat2 <- c()
rep2 <- c()

> for(i in 1:315){
     cont2 <- data.frame(typem,costm,i,factm,fact2m,trnsm,0,treatm,
                            develm,expm,decm)
     treat2 <- data.frame(typem,costm,i,factm,fact2m,trnsm,1,treatm,
                             develm,expm,decm)
     names(cont2) <- c('wartype','logcost','wardur','factnum','factnum2','trnsfcap','untype4','treaty','develop',
                          'exp','decade')
     names(treat2) <- c('wartype','logcost','wardur','factnum','factnum2','trnsfcap','untype4','treaty','develop',
                           'exp','decade')
     
     rep2[i] <- mean(predict(glm2, newdata = treat2,type = 'response')) - mean(predict(glm2, newdata = cont2, type = 'response'))
}

#plotting
plot(rep1, type = "l",lty = 'dotted',ylim = c(0,0.8),xlim = c(0,315),
      xlab = '',ylab='',sub = "FIG. 8. Causal Effect of Multidimensional UN Peacekeeping Operations")
 
par(new=TRUE)

plot(rep2,type = "l", ylim = c(0,0.8),axes = FALSE,
     ylab = "Marginal effects of UN peacekeeping operations",
     xlab="Duration of wars in months",cex.lab=1.1)

text(95,0.2,"Model with Interaction Term",cex=.8)
text(205,0.4,"Dotted:Original Model",cex=.8)


#Question 4

#running regression to get the propensity scores
glm_propensity <- glm(Tr ~ wartype + logcost + wardur + 
  factnum + factnum2 + trnsfcap + treaty + develop + exp + decade, family = binomial, data = foo)

#matching with propensity score and checking balances
mout_propensityscore <- Match(Tr=Tr, X=glm_propensity$fitted)

mb  <- MatchBalance(Tr ~  wartype + logcost + wardur + factnum + 
                        factnum2 + trnsfcap + 
                        treaty + develop + exp + decade, 
                    data=foo, match.out = mout_propensityscore, nboots=500)


#adding the Y values to the matching
#First Y is pbs2l
mout_propensityscore_withYs <- Match(Y=foo$pbs2l, Tr=Tr, X=glm_propensity$fitted, BiasAdjust = TRUE)
summary(mout_propensityscore_withYs)
mout_propensityscore_withYs$est
mout_propensityscore_withYs$est.noadj

#MatchBalance for p-values, to see if we have good matches
mb  <- MatchBalance(Tr ~  wartype + logcost + wardur + factnum + 
                        factnum2 + trnsfcap + treaty + develop + exp + decade, data=foo, 
                    match.out = mout_propensityscore_withYs, nboots=500)

#Then we check for 5 years. Since pbs5l had missing values, I replaced them with Failure
Y5 <- foo$pbs5l
Y5[is.na(Y5)] <- 'Failure'

mout_propensityscore_withYs5 <- Match(Y=Y5, Tr=Tr, X=glm_propensity$fitted, BiasAdjust = TRUE)
summary(mout_propensityscore_withYs5)
mout_propensityscore_withYs5$est
mout_propensityscore_withYs5$est.noadj

#MatchBalance for p-values, to see if we have good matches
mb  <- MatchBalance(Tr ~  wartype + logcost + wardur + factnum + 
                        factnum2 + trnsfcap + treaty + develop + exp + decade, data=foo, 
                    match.out = mout_propensityscore_withYs5, nboots=500)

#starting the genmatch
X = cbind(foo$wartype, foo$logcost, foo$wardur, foo$factnum2, foo$trnsfcap, foo$treaty, foo$develop, foo$exp, foo$decade)

genout = GenMatch(Tr = Tr, X = X, estimand = "ATT", M = 1, pop.size = 200, max.generations = 25, wait.generations = 7, nboots = 200)

genmout2 <- Match(Y=foo$pbs2l, Tr=Tr, X=X, Weight.matrix = genout, BiasAdjust = TRUE)
genmout5 <- Match(Y=Y5, Tr=Tr, X=X, Weight.matrix = genout, BiasAdjust = TRUE)

summary(genmout2)
genmout2$est
genmout2$est.noadj
#MatchBalance for p-values, to see if we have good matches
mb  <- MatchBalance(Tr ~  wartype + logcost + wardur + factnum + 
                        factnum2 + trnsfcap + treaty + develop + exp + decade, data=foo, 
                    match.out = genmout2, nboots=500)

summary(genmout5)
genmout5$est
genmout5$est.noadj
#MatchBalance for p-values, to see if we have good matches
mb  <- MatchBalance(Tr ~  wartype + logcost + wardur + factnum + 
                        factnum2 + trnsfcap + treaty + develop + exp + decade, data=foo, 
                    match.out = genmout5, nboots=500)


#Treatment effects without matching
glm1 <- glm(pbs2l ~ wartype + logcost + wardur + factnum + factnum2 + trnsfcap + treaty + develop + exp + decade, family = binomial, data = foo)
glm2 <- glm(Y5 ~ Tr + wartype + logcost + wardur + factnum + factnum2 + trnsfcap + treaty + develop + exp + decade, family = binomial, data = foo)

#to get the treatment coefficients for treatment effect
summary(glm1)
summary(glm2)



